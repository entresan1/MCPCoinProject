"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rpc-websockets";
exports.ids = ["vendor-chunks/rpc-websockets"];
exports.modules = {

/***/ "(ssr)/./node_modules/rpc-websockets/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/rpc-websockets/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ Client),\n/* harmony export */   CommonClient: () => (/* binding */ CommonClient),\n/* harmony export */   DefaultDataPack: () => (/* binding */ DefaultDataPack),\n/* harmony export */   Server: () => (/* binding */ Server),\n/* harmony export */   WebSocket: () => (/* binding */ WebSocket),\n/* harmony export */   createError: () => (/* binding */ createError)\n/* harmony export */ });\n/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ws */ \"(ssr)/./node_modules/ws/wrapper.mjs\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! eventemitter3 */ \"(ssr)/./node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/v1.js\");\n\n\n\n\n// src/lib/client/websocket.ts\nfunction WebSocket(address, options) {\n    return new ws__WEBPACK_IMPORTED_MODULE_0__[\"default\"](address, options);\n}\n// src/lib/utils.ts\nvar DefaultDataPack = class {\n    encode(value) {\n        return JSON.stringify(value);\n    }\n    decode(value) {\n        return JSON.parse(value);\n    }\n};\n// src/lib/client.ts\nvar CommonClient = class extends eventemitter3__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    /**\n  * Instantiate a Client class.\n  * @constructor\n  * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n  * @param {String} address - url to a websocket server\n  * @param {Object} options - ws options object with reconnect parameters\n  * @param {Function} generate_request_id - custom generation request Id\n  * @param {DataPack} dataPack - data pack contains encoder and decoder\n  * @return {CommonClient}\n  */ constructor(webSocketFactory, address = \"ws://localhost:8080\", { autoconnect = true, reconnect = true, reconnect_interval = 1e3, max_reconnects = 5, ...rest_options } = {}, generate_request_id, dataPack){\n        super();\n        this.webSocketFactory = webSocketFactory;\n        this.queue = {};\n        this.rpc_id = 0;\n        this.address = address;\n        this.autoconnect = autoconnect;\n        this.ready = false;\n        this.reconnect = reconnect;\n        this.reconnect_timer_id = void 0;\n        this.reconnect_interval = reconnect_interval;\n        this.max_reconnects = max_reconnects;\n        this.rest_options = rest_options;\n        this.current_reconnects = 0;\n        this.generate_request_id = generate_request_id || (()=>typeof this.rpc_id === \"number\" ? ++this.rpc_id : Number(this.rpc_id) + 1);\n        if (!dataPack) this.dataPack = new DefaultDataPack();\n        else this.dataPack = dataPack;\n        if (this.autoconnect) this._connect(this.address, {\n            autoconnect: this.autoconnect,\n            reconnect: this.reconnect,\n            reconnect_interval: this.reconnect_interval,\n            max_reconnects: this.max_reconnects,\n            ...this.rest_options\n        });\n    }\n    /**\n  * Connects to a defined server if not connected already.\n  * @method\n  * @return {Undefined}\n  */ connect() {\n        if (this.socket) return;\n        this._connect(this.address, {\n            autoconnect: this.autoconnect,\n            reconnect: this.reconnect,\n            reconnect_interval: this.reconnect_interval,\n            max_reconnects: this.max_reconnects,\n            ...this.rest_options\n        });\n    }\n    /**\n  * Calls a registered RPC method on server.\n  * @method\n  * @param {String} method - RPC method name\n  * @param {Object|Array} params - optional method parameters\n  * @param {Number} timeout - RPC reply timeout value\n  * @param {Object} ws_opts - options passed to ws\n  * @return {Promise}\n  */ call(method, params, timeout, ws_opts) {\n        if (!ws_opts && \"object\" === typeof timeout) {\n            ws_opts = timeout;\n            timeout = null;\n        }\n        return new Promise((resolve, reject)=>{\n            if (!this.ready) return reject(new Error(\"socket not ready\"));\n            const rpc_id = this.generate_request_id(method, params);\n            const message = {\n                jsonrpc: \"2.0\",\n                method,\n                params: params || void 0,\n                id: rpc_id\n            };\n            this.socket.send(this.dataPack.encode(message), ws_opts, (error)=>{\n                if (error) return reject(error);\n                this.queue[rpc_id] = {\n                    promise: [\n                        resolve,\n                        reject\n                    ]\n                };\n                if (timeout) {\n                    this.queue[rpc_id].timeout = setTimeout(()=>{\n                        delete this.queue[rpc_id];\n                        reject(new Error(\"reply timeout\"));\n                    }, timeout);\n                }\n            });\n        });\n    }\n    /**\n  * Logins with the other side of the connection.\n  * @method\n  * @param {Object} params - Login credentials object\n  * @return {Promise}\n  */ async login(params) {\n        const resp = await this.call(\"rpc.login\", params);\n        if (!resp) throw new Error(\"authentication failed\");\n        return resp;\n    }\n    /**\n  * Fetches a list of client's methods registered on server.\n  * @method\n  * @return {Array}\n  */ async listMethods() {\n        return await this.call(\"__listMethods\");\n    }\n    /**\n  * Sends a JSON-RPC 2.0 notification to server.\n  * @method\n  * @param {String} method - RPC method name\n  * @param {Object} params - optional method parameters\n  * @return {Promise}\n  */ notify(method, params) {\n        return new Promise((resolve, reject)=>{\n            if (!this.ready) return reject(new Error(\"socket not ready\"));\n            const message = {\n                jsonrpc: \"2.0\",\n                method,\n                params\n            };\n            this.socket.send(this.dataPack.encode(message), (error)=>{\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n    /**\n  * Subscribes for a defined event.\n  * @method\n  * @param {String|Array} event - event name\n  * @return {Undefined}\n  * @throws {Error}\n  */ async subscribe(event) {\n        if (typeof event === \"string\") event = [\n            event\n        ];\n        const result = await this.call(\"rpc.on\", event);\n        if (typeof event === \"string\" && result[event] !== \"ok\") throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n        return result;\n    }\n    /**\n  * Unsubscribes from a defined event.\n  * @method\n  * @param {String|Array} event - event name\n  * @return {Undefined}\n  * @throws {Error}\n  */ async unsubscribe(event) {\n        if (typeof event === \"string\") event = [\n            event\n        ];\n        const result = await this.call(\"rpc.off\", event);\n        if (typeof event === \"string\" && result[event] !== \"ok\") throw new Error(\"Failed unsubscribing from an event with: \" + result);\n        return result;\n    }\n    /**\n  * Closes a WebSocket connection gracefully.\n  * @method\n  * @param {Number} code - socket close code\n  * @param {String} data - optional data to be sent before closing\n  * @return {Undefined}\n  */ close(code, data) {\n        this.socket.close(code || 1e3, data);\n    }\n    /**\n  * Enable / disable automatic reconnection.\n  * @method\n  * @param {Boolean} reconnect - enable / disable reconnection\n  * @return {Undefined}\n  */ setAutoReconnect(reconnect) {\n        this.reconnect = reconnect;\n    }\n    /**\n  * Set the interval between reconnection attempts.\n  * @method\n  * @param {Number} interval - reconnection interval in milliseconds\n  * @return {Undefined}\n  */ setReconnectInterval(interval) {\n        this.reconnect_interval = interval;\n    }\n    /**\n  * Set the maximum number of reconnection attempts.\n  * @method\n  * @param {Number} max_reconnects - maximum reconnection attempts\n  * @return {Undefined}\n  */ setMaxReconnects(max_reconnects) {\n        this.max_reconnects = max_reconnects;\n    }\n    /**\n  * Connection/Message handler.\n  * @method\n  * @private\n  * @param {String} address - WebSocket API address\n  * @param {Object} options - ws options object\n  * @return {Undefined}\n  */ _connect(address, options) {\n        clearTimeout(this.reconnect_timer_id);\n        this.socket = this.webSocketFactory(address, options);\n        this.socket.addEventListener(\"open\", ()=>{\n            this.ready = true;\n            this.emit(\"open\");\n            this.current_reconnects = 0;\n        });\n        this.socket.addEventListener(\"message\", ({ data: message })=>{\n            if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n            try {\n                message = this.dataPack.decode(message);\n            } catch (error) {\n                return;\n            }\n            if (message.notification && this.listeners(message.notification).length) {\n                if (!Object.keys(message.params).length) return this.emit(message.notification);\n                const args = [\n                    message.notification\n                ];\n                if (message.params.constructor === Object) args.push(message.params);\n                else for(let i = 0; i < message.params.length; i++)args.push(message.params[i]);\n                return Promise.resolve().then(()=>{\n                    this.emit.apply(this, args);\n                });\n            }\n            if (!this.queue[message.id]) {\n                if (message.method) {\n                    return Promise.resolve().then(()=>{\n                        this.emit(message.method, message?.params);\n                    });\n                }\n                return;\n            }\n            if (\"error\" in message === \"result\" in message) this.queue[message.id].promise[1](new Error('Server response malformed. Response must include either \"result\" or \"error\", but not both.'));\n            if (this.queue[message.id].timeout) clearTimeout(this.queue[message.id].timeout);\n            if (message.error) this.queue[message.id].promise[1](message.error);\n            else this.queue[message.id].promise[0](message.result);\n            delete this.queue[message.id];\n        });\n        this.socket.addEventListener(\"error\", (error)=>this.emit(\"error\", error));\n        this.socket.addEventListener(\"close\", ({ code, reason })=>{\n            if (this.ready) setTimeout(()=>this.emit(\"close\", code, reason), 0);\n            this.ready = false;\n            this.socket = void 0;\n            if (code === 1e3) return;\n            this.current_reconnects++;\n            if (this.reconnect && (this.max_reconnects > this.current_reconnects || this.max_reconnects === 0)) this.reconnect_timer_id = setTimeout(()=>this._connect(address, options), this.reconnect_interval);\n        });\n    }\n};\nvar Server = class extends eventemitter3__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    /**\n  * Instantiate a Server class.\n  * @constructor\n  * @param {Object} options - ws constructor's parameters with rpc\n  * @param {DataPack} dataPack - data pack contains encoder and decoder\n  * @return {Server} - returns a new Server instance\n  */ constructor(options, dataPack){\n        super();\n        this.namespaces = {};\n        if (!dataPack) this.dataPack = new DefaultDataPack();\n        else this.dataPack = dataPack;\n        this.wss = new ws__WEBPACK_IMPORTED_MODULE_0__.WebSocketServer(options);\n        this.wss.on(\"listening\", ()=>this.emit(\"listening\"));\n        this.wss.on(\"connection\", (socket, request)=>{\n            const u = node_url__WEBPACK_IMPORTED_MODULE_2__.parse(request.url, true);\n            const ns = u.pathname;\n            if (u.query.socket_id) socket._id = u.query.socket_id;\n            else socket._id = (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n            socket[\"_authenticated\"] = false;\n            socket.on(\"error\", (error)=>this.emit(\"socket-error\", socket, error));\n            socket.on(\"close\", ()=>{\n                this.namespaces[ns].clients.delete(socket._id);\n                for (const event of Object.keys(this.namespaces[ns].events)){\n                    const index = this.namespaces[ns].events[event].sockets.indexOf(socket._id);\n                    if (index >= 0) this.namespaces[ns].events[event].sockets.splice(index, 1);\n                }\n                this.emit(\"disconnection\", socket);\n            });\n            if (!this.namespaces[ns]) this._generateNamespace(ns);\n            this.namespaces[ns].clients.set(socket._id, socket);\n            this.emit(\"connection\", socket, request);\n            return this._handleRPC(socket, ns);\n        });\n        this.wss.on(\"error\", (error)=>this.emit(\"error\", error));\n    }\n    /**\n  * Registers an RPC method.\n  * @method\n  * @param {String} name - method name\n  * @param {Function} fn - a callee function\n  * @param {String} ns - namespace identifier\n  * @throws {TypeError}\n  * @return {Object} - returns an IMethod object\n  */ register(name, fn, ns = \"/\") {\n        if (!this.namespaces[ns]) this._generateNamespace(ns);\n        this.namespaces[ns].rpc_methods[name] = {\n            fn,\n            protected: false\n        };\n        return {\n            protected: ()=>this._makeProtectedMethod(name, ns),\n            public: ()=>this._makePublicMethod(name, ns)\n        };\n    }\n    /**\n  * Sets an auth method.\n  * @method\n  * @param {Function} fn - an arbitrary auth method\n  * @param {String} ns - namespace identifier\n  * @throws {TypeError}\n  * @return {Undefined}\n  */ setAuth(fn, ns = \"/\") {\n        this.register(\"rpc.login\", fn, ns);\n    }\n    /**\n  * Marks an RPC method as protected.\n  * @method\n  * @param {String} name - method name\n  * @param {String} ns - namespace identifier\n  * @return {Undefined}\n  */ _makeProtectedMethod(name, ns = \"/\") {\n        this.namespaces[ns].rpc_methods[name].protected = true;\n    }\n    /**\n  * Marks an RPC method as public.\n  * @method\n  * @param {String} name - method name\n  * @param {String} ns - namespace identifier\n  * @return {Undefined}\n  */ _makePublicMethod(name, ns = \"/\") {\n        this.namespaces[ns].rpc_methods[name].protected = false;\n    }\n    /**\n  * Marks an event as protected.\n  * @method\n  * @param {String} name - event name\n  * @param {String} ns - namespace identifier\n  * @return {Undefined}\n  */ _makeProtectedEvent(name, ns = \"/\") {\n        this.namespaces[ns].events[name].protected = true;\n    }\n    /**\n  * Marks an event as public.\n  * @method\n  * @param {String} name - event name\n  * @param {String} ns - namespace identifier\n  * @return {Undefined}\n  */ _makePublicEvent(name, ns = \"/\") {\n        this.namespaces[ns].events[name].protected = false;\n    }\n    /**\n  * Removes a namespace and closes all connections\n  * @method\n  * @param {String} ns - namespace identifier\n  * @throws {TypeError}\n  * @return {Undefined}\n  */ closeNamespace(ns) {\n        const namespace = this.namespaces[ns];\n        if (namespace) {\n            delete namespace.rpc_methods;\n            delete namespace.events;\n            for (const socket of namespace.clients.values())socket.close();\n            delete this.namespaces[ns];\n        }\n    }\n    /**\n  * Creates a new event that can be emitted to clients.\n  * @method\n  * @param {String} name - event name\n  * @param {String} ns - namespace identifier\n  * @throws {TypeError}\n  * @return {Object} - returns an IEvent object\n  */ event(name, ns = \"/\") {\n        if (!this.namespaces[ns]) this._generateNamespace(ns);\n        else {\n            const index = this.namespaces[ns].events[name];\n            if (index !== void 0) throw new Error(`Already registered event ${ns}${name}`);\n        }\n        this.namespaces[ns].events[name] = {\n            sockets: [],\n            protected: false\n        };\n        this.on(name, (...params)=>{\n            if (params.length === 1 && params[0] instanceof Object) params = params[0];\n            for (const socket_id of this.namespaces[ns].events[name].sockets){\n                const socket = this.namespaces[ns].clients.get(socket_id);\n                if (!socket) continue;\n                socket.send(this.dataPack.encode({\n                    notification: name,\n                    params\n                }));\n            }\n        });\n        return {\n            protected: ()=>this._makeProtectedEvent(name, ns),\n            public: ()=>this._makePublicEvent(name, ns)\n        };\n    }\n    /**\n  * Returns a requested namespace object\n  * @method\n  * @param {String} name - namespace identifier\n  * @throws {TypeError}\n  * @return {Object} - namespace object\n  */ of(name) {\n        if (!this.namespaces[name]) this._generateNamespace(name);\n        const self = this;\n        return {\n            // self.register convenience method\n            register (fn_name, fn) {\n                if (arguments.length !== 2) throw new Error(\"must provide exactly two arguments\");\n                if (typeof fn_name !== \"string\") throw new Error(\"name must be a string\");\n                if (typeof fn !== \"function\") throw new Error(\"handler must be a function\");\n                return self.register(fn_name, fn, name);\n            },\n            // self.event convenience method\n            event (ev_name) {\n                if (arguments.length !== 1) throw new Error(\"must provide exactly one argument\");\n                if (typeof ev_name !== \"string\") throw new Error(\"name must be a string\");\n                return self.event(ev_name, name);\n            },\n            // self.eventList convenience method\n            get eventList () {\n                return Object.keys(self.namespaces[name].events);\n            },\n            /**\n      * Emits a specified event to this namespace.\n      * @inner\n      * @method\n      * @param {String} event - event name\n      * @param {Array} params - event parameters\n      * @return {Undefined}\n      */ emit (event, ...params) {\n                const socket_ids = [\n                    ...self.namespaces[name].clients.keys()\n                ];\n                for(let i = 0, id; id = socket_ids[i]; ++i){\n                    self.namespaces[name].clients.get(id).send(self.dataPack.encode({\n                        notification: event,\n                        params: params || []\n                    }));\n                }\n            },\n            /**\n      * Returns a name of this namespace.\n      * @inner\n      * @method\n      * @kind constant\n      * @return {String}\n      */ get name () {\n                return name;\n            },\n            /**\n      * Returns a hash of websocket objects connected to this namespace.\n      * @inner\n      * @method\n      * @return {Object}\n      */ connected () {\n                const socket_ids = [\n                    ...self.namespaces[name].clients.keys()\n                ];\n                return socket_ids.reduce((acc, curr)=>({\n                        ...acc,\n                        [curr]: self.namespaces[name].clients.get(curr)\n                    }), {});\n            },\n            /**\n      * Returns a list of client unique identifiers connected to this namespace.\n      * @inner\n      * @method\n      * @return {Array}\n      */ clients () {\n                return self.namespaces[name];\n            }\n        };\n    }\n    /**\n  * Lists all created events in a given namespace. Defaults to \"/\".\n  * @method\n  * @param {String} ns - namespaces identifier\n  * @readonly\n  * @return {Array} - returns a list of created events\n  */ eventList(ns = \"/\") {\n        if (!this.namespaces[ns]) return [];\n        return Object.keys(this.namespaces[ns].events);\n    }\n    /**\n  * Creates a JSON-RPC 2.0 compliant error\n  * @method\n  * @param {Number} code - indicates the error type that occurred\n  * @param {String} message - provides a short description of the error\n  * @param {String|Object} data - details containing additional information about the error\n  * @return {Object}\n  */ createError(code, message, data) {\n        return {\n            code,\n            message,\n            data: data || null\n        };\n    }\n    /**\n  * Closes the server and terminates all clients.\n  * @method\n  * @return {Promise}\n  */ close() {\n        return new Promise((resolve, reject)=>{\n            try {\n                this.wss.close();\n                this.emit(\"close\");\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n    /**\n  * Handles all WebSocket JSON RPC 2.0 requests.\n  * @private\n  * @param {Object} socket - ws socket instance\n  * @param {String} ns - namespaces identifier\n  * @return {Undefined}\n  */ _handleRPC(socket, ns = \"/\") {\n        socket.on(\"message\", async (data)=>{\n            const msg_options = {};\n            if (data instanceof ArrayBuffer) {\n                msg_options.binary = true;\n                data = Buffer.from(data).toString();\n            }\n            if (socket.readyState !== 1) return;\n            let parsedData;\n            try {\n                parsedData = this.dataPack.decode(data);\n            } catch (error) {\n                return socket.send(this.dataPack.encode({\n                    jsonrpc: \"2.0\",\n                    error: createError(-32700, error.toString()),\n                    id: null\n                }), msg_options);\n            }\n            if (Array.isArray(parsedData)) {\n                if (!parsedData.length) return socket.send(this.dataPack.encode({\n                    jsonrpc: \"2.0\",\n                    error: createError(-32600, \"Invalid array\"),\n                    id: null\n                }), msg_options);\n                const responses = [];\n                for (const message of parsedData){\n                    const response2 = await this._runMethod(message, socket._id, ns);\n                    if (!response2) continue;\n                    responses.push(response2);\n                }\n                if (!responses.length) return;\n                return socket.send(this.dataPack.encode(responses), msg_options);\n            }\n            const response = await this._runMethod(parsedData, socket._id, ns);\n            if (!response) return;\n            return socket.send(this.dataPack.encode(response), msg_options);\n        });\n    }\n    /**\n  * Runs a defined RPC method.\n  * @private\n  * @param {Object} message - a message received\n  * @param {Object} socket_id - user's socket id\n  * @param {String} ns - namespaces identifier\n  * @return {Object|undefined}\n  */ async _runMethod(message, socket_id, ns = \"/\") {\n        if (typeof message !== \"object\" || message === null) return {\n            jsonrpc: \"2.0\",\n            error: createError(-32600),\n            id: null\n        };\n        if (message.jsonrpc !== \"2.0\") return {\n            jsonrpc: \"2.0\",\n            error: createError(-32600, \"Invalid JSON RPC version\"),\n            id: message.id || null\n        };\n        if (!message.method) return {\n            jsonrpc: \"2.0\",\n            error: createError(-32602, \"Method not specified\"),\n            id: message.id || null\n        };\n        if (typeof message.method !== \"string\") return {\n            jsonrpc: \"2.0\",\n            error: createError(-32600, \"Invalid method name\"),\n            id: message.id || null\n        };\n        if (message.params && typeof message.params === \"string\") return {\n            jsonrpc: \"2.0\",\n            error: createError(-32600),\n            id: message.id || null\n        };\n        if (message.method === \"rpc.on\") {\n            if (!message.params) return {\n                jsonrpc: \"2.0\",\n                error: createError(-32e3),\n                id: message.id || null\n            };\n            const results = {};\n            const event_names = Object.keys(this.namespaces[ns].events);\n            for (const name of message.params){\n                const index = event_names.indexOf(name);\n                const namespace = this.namespaces[ns];\n                if (index === -1) {\n                    results[name] = \"provided event invalid\";\n                    continue;\n                }\n                if (namespace.events[event_names[index]].protected === true && namespace.clients.get(socket_id)[\"_authenticated\"] === false) {\n                    return {\n                        jsonrpc: \"2.0\",\n                        error: createError(-32606),\n                        id: message.id || null\n                    };\n                }\n                const socket_index = namespace.events[event_names[index]].sockets.indexOf(socket_id);\n                if (socket_index >= 0) {\n                    results[name] = \"socket has already been subscribed to event\";\n                    continue;\n                }\n                namespace.events[event_names[index]].sockets.push(socket_id);\n                results[name] = \"ok\";\n            }\n            return {\n                jsonrpc: \"2.0\",\n                result: results,\n                id: message.id || null\n            };\n        } else if (message.method === \"rpc.off\") {\n            if (!message.params) return {\n                jsonrpc: \"2.0\",\n                error: createError(-32e3),\n                id: message.id || null\n            };\n            const results = {};\n            for (const name of message.params){\n                if (!this.namespaces[ns].events[name]) {\n                    results[name] = \"provided event invalid\";\n                    continue;\n                }\n                const index = this.namespaces[ns].events[name].sockets.indexOf(socket_id);\n                if (index === -1) {\n                    results[name] = \"not subscribed\";\n                    continue;\n                }\n                this.namespaces[ns].events[name].sockets.splice(index, 1);\n                results[name] = \"ok\";\n            }\n            return {\n                jsonrpc: \"2.0\",\n                result: results,\n                id: message.id || null\n            };\n        } else if (message.method === \"rpc.login\") {\n            if (!message.params) return {\n                jsonrpc: \"2.0\",\n                error: createError(-32604),\n                id: message.id || null\n            };\n        }\n        if (!this.namespaces[ns].rpc_methods[message.method]) {\n            return {\n                jsonrpc: \"2.0\",\n                error: createError(-32601),\n                id: message.id || null\n            };\n        }\n        let response = null;\n        if (this.namespaces[ns].rpc_methods[message.method].protected === true && this.namespaces[ns].clients.get(socket_id)[\"_authenticated\"] === false) {\n            return {\n                jsonrpc: \"2.0\",\n                error: createError(-32605),\n                id: message.id || null\n            };\n        }\n        try {\n            response = await this.namespaces[ns].rpc_methods[message.method].fn(message.params, socket_id);\n        } catch (error) {\n            if (!message.id) return;\n            if (error instanceof Error) return {\n                jsonrpc: \"2.0\",\n                error: {\n                    code: -32e3,\n                    message: error.name,\n                    data: error.message\n                },\n                id: message.id\n            };\n            return {\n                jsonrpc: \"2.0\",\n                error,\n                id: message.id\n            };\n        }\n        if (!message.id) return;\n        if (message.method === \"rpc.login\" && response === true) {\n            const s = this.namespaces[ns].clients.get(socket_id);\n            s[\"_authenticated\"] = true;\n            this.namespaces[ns].clients.set(socket_id, s);\n        }\n        return {\n            jsonrpc: \"2.0\",\n            result: response,\n            id: message.id\n        };\n    }\n    /**\n  * Generate a new namespace store.\n  * Also preregister some special namespace methods.\n  * @private\n  * @param {String} name - namespaces identifier\n  * @return {undefined}\n  */ _generateNamespace(name) {\n        this.namespaces[name] = {\n            rpc_methods: {\n                __listMethods: {\n                    fn: ()=>Object.keys(this.namespaces[name].rpc_methods),\n                    protected: false\n                }\n            },\n            clients: /* @__PURE__ */ new Map(),\n            events: {}\n        };\n    }\n};\nvar RPC_ERRORS = /* @__PURE__ */ new Map([\n    [\n        -32e3,\n        \"Event not provided\"\n    ],\n    [\n        -32600,\n        \"Invalid Request\"\n    ],\n    [\n        -32601,\n        \"Method not found\"\n    ],\n    [\n        -32602,\n        \"Invalid params\"\n    ],\n    [\n        -32603,\n        \"Internal error\"\n    ],\n    [\n        -32604,\n        \"Params not found\"\n    ],\n    [\n        -32605,\n        \"Method forbidden\"\n    ],\n    [\n        -32606,\n        \"Event forbidden\"\n    ],\n    [\n        -32700,\n        \"Parse error\"\n    ]\n]);\nfunction createError(code, details) {\n    const error = {\n        code,\n        message: RPC_ERRORS.get(code) || \"Internal Server Error\"\n    };\n    if (details) error[\"data\"] = details;\n    return error;\n}\n// src/index.ts\nvar Client = class extends CommonClient {\n    constructor(address = \"ws://localhost:8080\", { autoconnect = true, reconnect = true, reconnect_interval = 1e3, max_reconnects = 5, ...rest_options } = {}, generate_request_id){\n        super(WebSocket, address, {\n            autoconnect,\n            reconnect,\n            reconnect_interval,\n            max_reconnects,\n            ...rest_options\n        }, generate_request_id);\n    }\n};\n //# sourceMappingURL=out.js.map\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rpc-websockets/dist/index.mjs\n");

/***/ })

};
;